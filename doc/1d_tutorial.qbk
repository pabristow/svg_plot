[section:tutorial_1d 1D Tutorials]

This section gives examples of plotting 1-dimensional data held in, for example, in an array or vector.

[/include 1d_vector_tutorial.qbk]
[section:1d_vector_tutorial 1-D Vector Example]

[import ../example/demo_1d_vector.cpp] [/Uses QuickBook in C++]
[demo_1d_vector_1]
[demo_1d_vector_2]

The IDE output is not very exciting in this case
[demo_1d_vector_output]
but the plot is
[$images/demo_1d_vector.svg]

(You can also view the SVG XML source using browsers (View, Source)
or use your favorite text editor like Notepad, TextPad etc at
[@/images/demo_1d_vector.svg demo_1d_vector.svg]

See [@../../example/demo_1d_vector.cpp demo_1d_vector.cpp]
for full source code.

[endsect] [/section:1d_vector_tutorial.qbk 1-D Vector Example.]

[/include demo_1d_containers.qbk]
[section:demo_1d_containers_tutorial 1-D STL Containers Examples]

[import ../example/demo_1d_containers.cpp]
[demo_1d_containers_1]
[demo_1d_containers_2]
[demo_1d_containers_3]
[demo_1d_containers_4]
[demo_1d_containers_5]
[demo_1d_containers_6]

[note For filling STL containers you may find the __Boost_Assign library by Thorsten Ottosen useful.]

The IDE output is not very exciting in this case:
[demo_1d_containers_output]

The plot is:

[$images/demo_1d_vector_float.svg]

And you can view the other svg files (with most internet browsers, and other programs too) for example:

* [@/images/demo_1d_array_long_double.svg demo_1d_array_long_double.svg]

* [@/images/demo_1d_set_double.svg demo_1d_set_double.svg]

* [@/images/demo_1d_list_double.svg demo_1d_list_double.svg]

* [@/images/demo_1d_deque_double.svg demo_1d_deque_double.svg]

See [@../../example/demo_1d_containers.cpp demo_1d_containers.cpp]
for full source code.
[endsect] [/section:demo_1d_containers_tutorial 1-D Containers Examples]

[/include 1d_autoscale_containers.qbk]
[section:1d_autoscale_containers Tutorial: 1D Autoscale with Multiple Containers]

This example demonstrates autoscaling with *multiple* STL containers.

[import ../example/auto_1d_containers.cpp]

[auto_1d_containers_1]
[auto_1d_containers_2]

[warning The containers must be of the same type to use the function range_all.
If different types of containers, for example some in a set and some in a vector,
then the min and max for each container must be computed separately
and the minimum of the minimums and the maximum of the maximums injected into the
x_autoscale (and/or y_autoscale) call.]

Typical output is:
[auto_1d_containers_output]

See [@../../example/auto_1d_containers.cpp auto_1d_containers.cpp]
for full source code and sample output.

[endsect] [/ section:1d_autoscale_containers Tutorial: 1D Autoscale with Multiple Containers]

[/include 1d_full_tutorial.qbk]
[section:full_1d_layout Tutorial: 1D More Layout Examples]

This section shows a few more of the near-infinite layout options.
See also the reference section and function index.

[tip Nearly all examples use  __chaining_functions to set the very many options.]

  #include <boost/svg_plot/svg_1d_plot.hpp>
  using namespace boost::svg;
  #include <cmath>  // for sqrt

  #include <vector>
  #include <deque>
  #include <boost/array.hpp>

  // Three different STL-style containers:
  using std::vector;
  using std::deque;
  using boost::array;

  // Three sample functions:
  double f(double x)
  {
    return sqrt(x);
  }

  double g(double x)
  {
    return -2 + x*x;
  }

  double h(double x)
  {
    return -1 + 2*x;
  }

  int main()
  {
    vector<double> data1;
    deque<double> data2;
    boost::array<double, 10> data3;
    // Fill the containers with some data using the functions:
    int j=0;
    for(double i=0; i<9.5; i+=1.)
    {
      data1.push_back(f(i));
      data2.push_front(g(i));
      data3[j++] = h(i);
    }

    svg_1d_plot my_plot; // Construct my_plot.

    // Set many plot options,
    // using chaining to group similar aspects together.
    // Size/scale settings.
    my_plot.image_size(500, 350)
           .x_range(-3, 10);

    // Text settings.
    my_plot.title("Oh My!")
           .title_font_size(29)
           .x_label("Time in Months") // X- axis label
           .x_label_on(true); // Not needed, because although the default is no axis label,
           // providing a label has this effect.
           // If we want later to switch *off* labels,
           // my_plot.x_label_on(false); // is needed.

    // Commands.
    my_plot.legend_on(true)
           .plot_window_on(true)
           .x_major_labels_on(true);

    // Color settings.
    my_plot.background_color(svg_color(67, 111, 69))
           .legend_background_color(svg_color(207, 202,167))
           .legend_border_color(svg_color(102, 102, 84))
           .plot_background_color(svg_color(136, 188, 126))
           .title_color(white);

    // Axis settings.
    my_plot.x_major_interval(2)
           .x_major_tick_length(14)
           .x_major_tick_width(1)
           .x_minor_tick_length(7)
           .x_minor_tick_width(1)
           .x_num_minor_ticks(3);

    // Legend settings.
    my_plot.legend_title_font_size(15);

    // Put the three containers of data onto the plot.
    my_plot.plot(data1, "Lions",  blue);
    my_plot.plot(data2, "Tigers", orange);
    my_plot.plot(data3, "Bears",  red);

    my_plot.write("1d_full_layout.svg");

    return 0;
  } // int main()

This produces the following plot:
[$images/1d_full_layout.svg]

A little bit of color customization goes a *very* long way!
[endsect] [/section:full_1d_layout Tutorial: 1D More Layout Examples]

[/include 1d_special_tutorial.qbk]
[section:1d_special Tutorial: 1D Gridlines & Axes - more examples]

It is possible to change the location of the intersection of the axes,
and the labelling - at the top, bottom or in the middle on the Y axis.
This is controlled using the `enum x_axis_intersect` and function
`x_ticks_on_window_or_axis`.

[import ../example/demo_1d_x_external.cpp]

[demo_1d_x_external_1]

[h4 X-Axis Grid Lines]

If you would like vertical grid lines that go on the graph,
you can make the following call to `svg_1d_plot`:

  my_plot.x_major_grid_on(true)
         .x_minor_grid_on(true);

To color style it, you might add the following calls:

  my_plot.x_major_grid_color(lightgray) // Darker color for major grid.
         .x_minor_grid_color(whitesmoke); // Lighter color for minor grid.

This will produce the following image:

[$images/1d_x_grid.svg]

[h4 X-Axis Tick value labels precision, iosflags, font family and size]

[import ../example/demo_2d_tick_values.cpp]

[demo_2d_tick_values_1]
[demo_2d_tick_values_2]

producing this plot [$images/demo_2d_tick_values.svg]

See [@../../example/demo_2d_tick_values.cpp demo_2d_tick_values.cpp]
for full source code.

[endsect] [/section:1d_special Tutorial: 1D Gridlines & Axes]

[/include demo_1d_axis_scaling.qbk]
[section:demo_1d_axis_scaling 1-D Axis Scaling]

[h4 Axis scaling with function scale_axis]

[import ../example/demo_1d_axis_scaling.cpp]

[demo_1d_axis_scaling_1]
[demo_1d_axis_scaling_2]
[demo_1d_axis_scaling_3]

[h4 scale_axis Function Examples]

[demo_1d_axis_scaling_4]
[demo_1d_axis_scaling_5]

The output is:
[demo_1d_axis_scaling_output]

See [@../../example/demo_1d_axis_scaling.cpp demo_1d_axis_scaling.cpp]
for full source code.

[endsect] [/section:demo_1d_axis_scaling 1-D Axis Scaling]

[/include demo_1d_autoscaling.qbk]
[section:auto_1d_plot 1-D Auto scaling Examples]

[import ../example/auto_1d_plot.cpp]
[auto_1d_plot_1]
[auto_1d_plot_2]
[auto_1d_plot_3]

The output is:
[auto_1d_plot_output]

[$images/auto_1d_plot.svg]

See [@../../example/auto_1d_plot.cpp auto_1d_plot.cpp]
for full source code.
[endsect] [/section:auto_1d_plot 1-D Auto scaling Examples]

[section:demo_1d_autoscaling 1-D Autoscaling Various Containers Examples]
[import ../example/demo_1d_autoscaling.cpp]

[demo_1d_autoscaling_1]
[demo_1d_autoscaling_2]
[demo_1d_autoscaling_3]

The output is:
[demo_1d_autoscaling_output]

and the plot:
[$images/demo_1d_autoscaling.svg]

See [@../../example/demo_1d_autoscaling.cpp demo_1d_autoscaling.cpp]
for full source code.

[endsect] [/section:demo_1d_autoscaling 1-D Autoscaling Various Containers Examples]

[/include demo_1d_values.qbk]
[section:demo_1d_values 1-D Data Values Examples]

[h4 Showing 1D Data Values Examples]

[import ../example/demo_1d_values.cpp]

[demo_1d_values_1]
[demo_1d_values_2]
[demo_1d_values_output]

[h4 Showing 1D Data 'at limit' Values Examples]

This example demonstrates showing values that are too small or too large, or NotaNumber.

[import ../example/demo_1d_limits.cpp]

[demo_1d_limits_1]
[demo_1d_limits_2]
Typical output is:
[demo_1d_limits_output]

[$images/demo_1d_limits.svg]
See [@../../example/demo_1d_limits.cpp demo_1d_limits.cpp]
for full source code and sample output.

[endsect] [/section:demo_1d_values 1-D Data Values Examples]

[section:demo_1d_heat_flow_data Real-life Heat flow data]

This example shows some real-life data plotted in 1D and as a boxplot.
[import ../example/demo_1d_heat_flow_data.cpp]

[heat_flow_1d_plot_1]

[$images/heat_flow_data.svg]
[$images/heat_flow_data_boxplot.svg]

See [@../../example/demo_1d_heat_flow_data.cpp demo_1d_heat_flow_data.cpp]
for full source code and sample output.

[endsect] [/section:demo_1d_heat_flow_data Real life Heat flow data]

[section:demo_1d_uncertainty Demonstration of using 1D data that includes information about its Uncertainty]

[import ../example/demo_1d_uncertainty.cpp]

[demo_1d_uncertainty_1]
[demo_1d_uncertainty_2]
[/demo_1d_uncertainty_output] [/Caution doesn't like 8-bit codepage +- symbol so don't use in .?pp or in output or .qbk, Only Unicode is OK.]

The resulting plot is
[$images/demo_1d_uncertainty.svg]

See [@../../example/demo_1d_uncertainty.cpp demo_1d_uncertainty.cpp]
for full source code and sample output.

If the plot does not meet you expectations, your could list all the hundreds of options with function show_1d_settings.

And if all else fails, defining the macro BOOST_SVG_DIAGNOSIS will trigger output of more information
about which points are being ignored as being outside the plot window, a common cause of missing lines.

[endsect] [/section:demo_1d_uncertainty Demonstration of using 1D data that includes information about its uncertainty]

[endsect] [/section:tutorial_1d 1D Tutorials]
[/ 1d_tutorial.qbk
  Copyright 2007 Jake Voytko.
  Copyright 2008, 2009, 2011 Paul A. Bristow.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]


