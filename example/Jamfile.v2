# I:\boost-trunk/libs\svg_plot\example\Jamfile.v2

# Runs SVG Plot examples.

# Paul@hetpD MINGW64 /i/boost/libs/svg_plot/example (develop)
# $ b2 toolset=msvc,gcc,clang cxxstd=17 release > svg_plot_examples_msvc_gcc_clang_c++17_9sep2020.log    

# Copyright 2009, 2012, 2014, 2020 Paul A. Bristow.

# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt
# or copy at http://www.boost.org/LICENSE_1_0.txt)

# Bring in the rules for testing.
import testing ;
import path ;
import modules ;

echo "Building SVGplot examples." ;

project
    :  requirements
      <define>BOOST_ALL_NO_LIB # Avoid using 'libboost_math_c99-vc100-mt-gd-1_53.lib'.
      #  GCC
      <toolset>gcc:<cxxflags>-w # Inhibit all warning messages.
      <toolset>gcc:<cxxflags>-Wno-missing-braces
      <toolset>gcc:<cxxflags>-std=c++14
      <toolset>gcc:<cxxflags>-Wno-reorder
      # Darwin
      #<toolset>darwin:<cxxflags>-Wno-missing-braces
      #<toolset>acc:<cxxflags>+W2068,2461,2236,4070
      #<toolset>intel:<cxxflags>-Qwd264,239
      #  Clang
      #<toolset>clang:<cxxflags>-w # Inhibit all warning messages.
      <toolset>clang:<cxxflags>-std=c++17
      <toolset>clang:<cxxflags>-Wno-reorder
      <toolset>clang:<cxxflags>-Wno-unused-variable
      # <toolset>clang:<cxxflags>-Wno-delete-non-abstract-non-virtual-dtor #  virtual functions but non-virtual destructor (in
      #<toolset>clang:<link>static
      #  MSVC
      #<toolset>msvc:<link>static
      <toolset>msvc:<warnings>all
      #<toolset>msvc:<asynch-exceptions>on
      <toolset>msvc:<cxxflags>/wd4800 # Forcing value to bool 'true' or 'false'
      <toolset>msvc:<cxxflags>/wd4996 # Deprecated.
      <toolset>msvc:<cxxflags>/wd4512 # Assignment operator could not be generated.
       <toolset>msvc:<cxxflags>/wd4245 #  'initializing' : conversion from 'int' to 'unsigned short', signed/unsigned mismatch
       # needed for \boost/date_time/format_date_parser.hpp(66)
        <toolset>msvc:<cxxflags>/wd4913 #  user defined binary operator ',' exists but no overload could convert all operands, default built-in binary operator ',' used
     # needed for  boost/algorithm/minmax_element.hpp(103)
      #<toolset>msvc:<cxxflags>/wd4610 #
      #<toolset>msvc:<cxxflags>/wd4510 #
      <toolset>msvc:<cxxflags>/wd4702 # unreachable code (in triangular and uniform distribution).
      <toolset>msvc:<cxxflags>/wd4127 # Expression is constant.
      #<toolset>msvc:<cxxflags>/wd4305 #
      #<toolset>msvc:<cxxflags>/wd4503 # Decorated name length exceeded, name was truncated.
      #<toolset>msvc:<cxxflags>/wd4180 # Qualifier applied to function type has no meaning; ignored.
      <include>../../../ # boost-trunk
      #<include>../../../boost/quan/
    ;
    
if --dist_graphs in  [ modules.peek : ARGV ]
{
   ECHO "Building Boost.Math distribution graphs." ;
   run ../../math/doc/graphs/dist_graphs.cpp ;
}


if --extras in  [ modules.peek : ARGV ]
{
   ECHO "Building extra SVG_Plot examples." ;
   run jacobi_zeta_plot.cpp ;
   run arcsine_dist_graphs.cpp ;
   run convertible_to_double.cpp ;
   run demo_1d_meas.cpp ;
   run demo_1d_tick_values.cpp ;
   run demo_2d_area_fill.cpp ;
   run demo_2d_bad_function.cpp ;
   run demo_2d_bezier.cpp ;
   run demo_2d_fonts.cpp ;
   run demo_2d_weather.cpp ;
   run demo_annotation.cpp ;
   run demo_FP_compare.cpp ;
   run demo_functions_boxplot.cpp ;
   run demo_Hoaglin.cpp ;
   run demo_point_markers.cpp ;
   run demo_rounds.cpp ;
   run svg_test_boxplot.cpp ;
   run svg_test.cpp ;
   run svg_colors.cpp ;
   
   #run test_legend_place.cpp ;
   #run test_quantiles.cpp ;
   #run test_axis_labels.cpp ;
   #run test_axis_scaling.cpp ;
   #run test_axis_scaling2.cpp ;
   #run test_sci.cpp ;
   #run test_unc.cpp ;
   #run test_unc_pair.cpp ;
   #run default_1d_plot.cpp ;
   #run default_2d_plot.cpp ;
# run test_axis_scaling.cpp ;
# run demo_fp_compare.cpp ;
}
else
{
   ECHO "Building the main SVG_plot examples. To get more examples try building with --extras" ;
   
   run 1d_full_layout.cpp ;
   run 1d_simple_style.cpp ;
   run 1d_x_external.cpp ;
   run 1d_x_grid.cpp ;
   run 2d_area_fill.cpp ;
   run 2d_bezier.cpp ;
   run 2d_full.cpp ;
   run 2d_limit.cpp ;
   run 2d_simple.cpp ;
   run 2d_y_grid.cpp ;
   run auto_1d_containers.cpp ;
   run auto_1d_plot.cpp ;
   run auto_2d_plot.cpp ;
   run auto_boxplot.cpp ;
   run boxplot_full.cpp ;
   run boxplot_simple.cpp ;
   run container_minmax.cpp ;
   run demo_1d_autoscaling.cpp ;
   run demo_1d_axis_scaling.cpp ;
   run demo_1d_containers.cpp ;
   run demo_1d_heat_flow_data.cpp ; # demonstrate 1d and boxplot of NIST heatflow data.
   run demo_1d_limits.cpp ; #
   run demo_1d_plot.cpp ; # Demonstration of many features for 1D plots.
   run demo_1d_simple.cpp ;
   run demo_1d_uncertainty.cpp ; # Demonstrate showing uncertainty as 1 sd, 2 sd, 3 sd ellipses.
   run demo_1d_values.cpp ; # Demonstration of some simple 1D value formatting.
   run demo_1d_vector.cpp ; # Simple plot of vector of 1D data.
   run demo_1d_x_external.cpp ; #
   run demo_2d_area_fill.cpp ;
   run demo_2d_autoscaling.cpp ;
   run demo_2d_autoscaling_vector.cpp ;
   run demo_2d_bars.cpp ; # Demonstrate the bars (& columns or sticks).
   run demo_2d_histogram.cpp ; #  Demonstrate drawing histogram.
   run demo_2d_legend_lines_markers.cpp ; # Demonstration of legend with combinations of markers, styles, lines.
   run demo_2d_limits.cpp ; #
   run demo_2d_lines.cpp ; # Demonstrate fit lines.
   run demo_2d_plot.cpp ; # Demonstration of some 2D plot features.
   run demo_2d_simple.cpp ; # Demonstration of some simple 2D plot features.
   run demo_2d_uncertainty.cpp ; # Demonstrate showing uncertainty as 1 sd, 2 sd, 3 sd ellipses.
   run demo_2d_values.cpp ; # Demonstration of marking values in 2D plots.
   run demo_annotation.cpp ; # Demonstration of adding textual annotation.
   run demo_boxplot.cpp ; # Demonstration of boxplots.
   run demo_boxplot_full.cpp ; # Demonstration of more options for Boxplots.
   run demo_boxplot_simple.cpp ; # Demonstration of simple boxplot.
   run demo_color.cpp ; # Demonstration of some SVG color features.
   run demo_Hoaglin.cpp ; # Demonstration of Boxplot quartile options.
   run demo_point_markers.cpp ; # Demonstration of marking data point options.
   run demo_rounds.cpp ; # Demonstration of rounding algorithm used for binary, five, decimal autoscaling.
   run demo_svg.cpp ;
   run demo_svg_tspan.cpp ; # Demonstration of tspan commands.
}

